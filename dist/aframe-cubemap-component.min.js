!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t){if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");AFRAME.registerComponent("cubemap",{schema:{folder:{type:"string"},edgeLength:{type:"int",default:5e3},ext:{type:"string",default:"jpg"},transparent:{type:"boolean",default:!1}},update:function(e){var t=this.el,n=this.data,r=n.folder,a=["posx","negx","posy","negy","posz","negz"];a=a.map(function(e){return e+"."+n.ext});var o=THREE.ShaderLib.cube,u=new THREE.ShaderMaterial({fragmentShader:o.fragmentShader,vertexShader:o.vertexShader,uniforms:o.uniforms,depthWrite:!1,side:THREE.BackSide,transparent:n.transparent}),i=n.edgeLength,p=new THREE.CubeGeometry(i,i,i),f=new THREE.CubeTextureLoader;f.setPath(r),f.load(a,function(e){var n=u.clone();Object.defineProperty(n,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.uniforms.envMap.value=e,t.setObject3D("cubemap",new THREE.Mesh(p,n))})},remove:function(){this.el.removeObject3D("cubemap")}})}]);